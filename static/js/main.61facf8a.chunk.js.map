{"version":3,"sources":["pixel_logo.png","actions/imageActions.js","components/Images/ImageUploader.js","actions/loginActions.js","components/Users/LogoutButton.js","components/Navigation.js","components/Header.js","components/Images/ImageList.js","components/Images/ShowImage.js","components/Images/ImageFilters.js","components/Images/ImageContainer.js","components/Images/ImagesContainer.js","components/Users/LoginForm.js","components/NotFoundPage.js","App.js","reducers/imagesReducer.js","reducers/loginReducer.js","serviceWorker.js","index.js"],"names":["module","exports","baseURL","headers","fetchImages","userId","dispatch","type","fetch","then","response","json","responseJSON","images","included","map","image","id","image_url","attributes","transformations","ImageUploader","showWidget","window","cloudinary","openUploadWidget","cloudName","uploadPreset","error","result","event","handleSubmit","info","imageInfo","newImage","user_id","this","props","user","public_id","postImages","className","onClick","Component","connect","state","imagesReducer","loginReducer","method","body","JSON","stringify","catch","console","log","withRouter","LogoutButton","e","preventDefault","logout","history","push","Nav","NavItem","NavLink","to","location","pathname","Navbar","light","expand","NavbarBrand","href","src","logo","alt","undefined","ImageList","handleClick","getCurrentImage","prevProps","length","currentImage","key","publicId","effect","ShowImage","selectedImageFilter","filterOptions","ImageFilters","value","onChange","handleFilterChange","Object","keys","k","ImageContainer","handleSave","saveImage","handleRemove","removeImage","setSelectedImageFilter","setState","filter","target","CardGroup","Card","Col","md","CardHeader","CardBody","CardText","Button","transformation","data","imageId","ImagesContainer","handleLoadingImages","loading","handleImage","Row","sm","size","offset","LoginForm","handleErrors","errors","entries","v","email","password","login","Container","Alert","color","Form","name","onSubmit","FormGroup","placeholder","mode","NotFoundPage","App","basename","process","path","component","exact","action","logged_in","Boolean","hostname","match","appReducer","combineReducers","persistConfig","storage","persistedReducer","persistReducer","store","createStore","applyMiddleware","thunk","persistor","persistStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.61facf8a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pixel_logo.99b02481.png\";","const baseURL = 'https://pixelate-app.herokuapp.com/'\nconst imagesURL = '/images'\nconst usersURL = '/users'\nconst headers =  {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      }\n\nexport const fetchImages = (userId) => {\n  return (dispatch) => {\n    dispatch({ type: 'LOADING_IMAGES'})\n    fetch(`${baseURL + usersURL}/${userId}`)\n      .then(response => { return response.json()})\n      .then(responseJSON => {\n      dispatch({\n        type: 'DISPLAY_IMAGES',\n        images: responseJSON.included.map(\n          image => (\n            { id:image.id, image_url:image.attributes.image_url, transformations:image.attributes.transformations}\n          ))\n        }\n      )\n    })\n  }\n}\n\nexport const postImages = (image) => {\n  return (dispatch) => {\n    fetch(baseURL + imagesURL, {\n      method: \"POST\",\n      headers: headers,\n      body: JSON.stringify({\n        image: image\n      })\n    })\n      .then(response => response.json())\n      .then(image => {\n        dispatch({\n          type: 'CREATE_IMAGES',\n          image\n        })\n      })\n      .catch(error => console.log(error))\n  };\n}\n\nexport const removeImage = (imageId, userId, history) => {\n  return (dispatch) => {\n    dispatch({ type: 'REMOVE_IMAGE'})\n    fetch(`${baseURL + imagesURL}/${imageId}`, {\n      method: \"DELETE\",\n      headers: headers,\n      body: JSON.stringify({\n        imageId\n      })\n    })\n    .then(image => {\n      dispatch({\n        type: 'GET_CURRENT_IMAGE',\n        image: undefined\n      })\n    })\n  };\n}\n\nexport const saveImage = (image, transformation) => {\n  return (dispatch) => {\n    fetch(`${baseURL + imagesURL}/${image.id}`, {\n      method: \"PUT\",\n      headers: headers,\n      body: JSON.stringify({\n        image,\n        transformation\n      })\n    })\n    .then(response => response.json())\n    .then(image => {\n        dispatch({\n          type: 'UPDATE_IMAGE',\n          image\n        })\n        return image\n      }\n    )\n    .then(({ data: { id, attributes: { transformations, image_url } } }) => {\n      dispatch({\n        type: 'GET_CURRENT_IMAGE',\n        image: {id, transformations, image_url}\n      })\n    })\n  };\n}\n\nexport const getCurrentImage = (image) => {\n  return (dispatch) => {\n    dispatch({\n      type: 'GET_CURRENT_IMAGE',\n      image\n    })\n  };\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom'\nimport { postImages } from '../../actions/imageActions'\n\n\nclass ImageUploader extends Component {\n\n  handleSubmit(imageInfo) {\n    let newImage = { user_id: this.props.user.id, image_url:imageInfo.public_id }\n    this.props.postImages(newImage)\n  }\n\n\tshowWidget = () => {\n    window.cloudinary.openUploadWidget({\n      cloudName: \"df8jfhyew\",\n      uploadPreset: \"eytnlidt\"},\n      (error, result) => {\n        if (!error && result && result.event === \"success\") {\n          this.handleSubmit(result.info)\n        }\n      }\n    )\n  }\n\n  render() {\n    return (\n      <button\n        className=\"nav-button\"\n        id=\"upload-widget\"\n        onClick={() => this.showWidget()}>\n        UPLOAD IMAGES\n      </button>\n    )\n  }\n}\n\nexport default connect(\n  state => ({\n    images: state.imagesReducer.images,\n    user: state.loginReducer.user\n}), { postImages })(withRouter(ImageUploader));\n","const baseURL = 'https://pixelate-app.herokuapp.com/'\nconst usersURL = '/users'\nconst headers = {\n  'Accept': 'application/json',\n  'Content-Type': 'application/json',\n}\n\nexport const login = (user, history) => {\n  return (dispatch) => {\n    fetch(baseURL + usersURL , {\n      mode: 'cors',\n      method: \"POST\",\n      headers: headers,\n      body: JSON.stringify({\n        user\n      })\n    })\n      .then(response => response.json())\n      .then(user => {\n        dispatch({\n          type: 'GET_USER',\n          user\n        })\n        return user\n      })\n      .then(user => {\n        if(user.result === undefined) {\n          dispatch({\n            type: 'LOGGED_IN',\n          })\n          history.push(`/images/${user.id}`)\n        } else {\n          dispatch({\n            type: 'LOGIN_ERROR',\n            error: user.user\n          })\n        }\n      })\n  };\n};\n\nexport const logout = (history) => {\n  return (dispatch) => {\n    dispatch({\n      type: 'LOG_OUT',\n    })\n  }\n}\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { logout } from '../../actions/loginActions';\n\nclass LogoutButton extends Component {\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.props.logout();\n    this.props.history.push(\"/\");\n  }\n\n  render() {\n    return (\n      <button\n        className=\"nav-button\"\n        onClick={(e) => this.handleSubmit(e)}>\n        LOG OUT\n      </button>\n    )\n  }\n}\n\nexport default connect(\n  state => ({\n    user: state.loginReducer.user,\n    error: state.loginReducer.error\n  }), { logout })(withRouter(LogoutButton));\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport ImageUploader from './Images/ImageUploader'\nimport LogoutButton from './Users/LogoutButton'\nimport { Nav, NavItem, NavLink} from 'reactstrap';\n\nconst Navigation = (props) => {\n  return (\n    <Nav>\n      <NavItem>\n        <NavLink to={props.history.location.pathname}>{<ImageUploader />}</NavLink>\n      </NavItem>\n      <NavItem>\n        <NavLink to=\"/\">{<LogoutButton />}</NavLink>\n      </NavItem>\n    </Nav>\n  );\n}\n\nexport default withRouter(Navigation);\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport logo from '../pixel_logo.png';\nimport { Navbar, NavbarBrand } from 'reactstrap';\nimport Navigation from './Navigation'\n\nconst Header = (props) => {\n  return (\n    <Navbar className=\"App-header\" light expand=\"md\">\n      <NavbarBrand href=\"/\"><img src={logo} className=\"App-logo\" alt=\"logo\" /></NavbarBrand>\n        {props.history.location.pathname  === \"/\" ? undefined : <Navigation />}\n    </Navbar>\n  );\n}\n\nexport default withRouter(Header);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {Image, Transformation, CloudinaryContext} from 'cloudinary-react';\nimport { getCurrentImage, fetchImages } from '../../actions/imageActions'\n\nclass ImageList extends Component {\n\n  componentDidUpdate(prevProps) {\n    if ((prevProps.images.length !== this.props.images.length) ||\n      (prevProps.currentImage && this.props.currentImage === undefined)) {\n      this.props.fetchImages(this.props.user.id)\n    }\n  }\n\n  handleClick = (image) => {\n    this.props.getCurrentImage(image)\n  }\n\n  render() {\n   return (\n     this.props.images.map(image =>\n       <div key={image.id} >\n         <CloudinaryContext cloudName=\"df8jfhyew\" >\n           <Image className='img-thumbnail' publicId={image.image_url} onClick={() => this.handleClick(image)}>\n             <Transformation effect={image.transformations} />\n           </Image>\n         </CloudinaryContext>\n       </div>\n     )\n   )\n  }\n}\n\n\n\n\nexport default connect(\n  state => ({\n    images: state.imagesReducer.images,\n    user: state.loginReducer.user,\n    currentImage: state.imagesReducer.currentImage\n  }),{ getCurrentImage, fetchImages })(ImageList);\n","import React from 'react';\nimport { Image, Transformation, CloudinaryContext}  from 'cloudinary-react';\n\nconst ShowImage = (props) => {\n  return (\n    <div key={props.image.id}>\n      <CloudinaryContext cloudName=\"df8jfhyew\">\n        <Image className='largeImage' publicId={props.image.image_url} >\n          <Transformation effect={props.selectedImageFilter} />\n        </Image>\n      </CloudinaryContext>\n    </div>\n  )\n};\n\nexport default ShowImage;\n","import React from 'react';\n\nconst filterOptions = {\n  \"No Effect\": \"none\",\n  \"Auto Brightness\": \"auto_brightness\",\n  \"Auto Saturation\": \"auto_saturation\",\n  \"Black & White\": \"blackwhite\",\n  \"Blur\": \"blur:100\",\n  \"Cartoonify\": \"cartoonify\",\n  \"Contrast: Light\": \"contrast:50\",\n  \"Contrast: Heavy\": \"contrast:100\",\n  \"Grayscale\": \"grayscale\",\n  \"Oil Paint\": \"oil_paint:75\",\n  \"Ombre\": \"gradient_fade:20\",\n  \"Pixelate: Light\": \"pixelate:10\",\n  \"Pixelate: Heavy\": \"pixelate:30\",\n  \"Sepia\": \"sepia:80\",\n  \"Sharpen\": \"sharpen:300\",\n  \"Tilt Shift\": \"tilt_shift:20\",\n  \"Vignette\": \"vignette:10\"\n}\n\nconst ImageFilters = (props) => {\n  return (\n    <select value={props.selectedImageFilter || \"none\"} onChange={props.handleFilterChange}>\n      {\n        Object.keys(filterOptions).map(\n        (k) =>\n        <option key={k} value={filterOptions[k]}>{k}</option>\n        )\n      }\n    </select>\n  );\n};\n\n\nexport default ImageFilters\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { saveImage, removeImage } from '../../actions/imageActions';\nimport ShowImage from './ShowImage';\nimport ImageFilters from './ImageFilters';\nimport { CardGroup, Col, Card,Button, CardHeader, CardBody, CardText} from 'reactstrap';\n\nclass ImageContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedImageFilter: null\n    };\n  };\n\n  componentDidMount() {\n    this.setSelectedImageFilter(this.props.currentImage.transformations);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.currentImage.id !== this.props.currentImage.id) {\n      this.setSelectedImageFilter(this.props.currentImage.transformations);\n    }\n  }\n\n  handleSave = () => {\n    this.props.saveImage(this.props.currentImage, this.state.selectedImageFilter)\n  }\n\n  handleRemove = () => {\n    this.props.removeImage(this.props.currentImage.id, this.props.currentImage.user_id, this.props.history)\n  }\n\n  setSelectedImageFilter = (selectedImageFilter) => {\n    this.setState({ selectedImageFilter });\n  }\n\n  handleFilterChange = (e) => {\n    const filter = e.target.value === \"none\" ? null : e.target.value;\n    this.setSelectedImageFilter(filter);\n  }\n\n  render() {\n    const { currentImage } = this.props;\n    return (\n      <CardGroup>\n        <Card className=\"card-img\">\n          <ShowImage image={currentImage} selectedImageFilter={this.state.selectedImageFilter} />\n        </Card>\n        <Col md=\"4\">\n          <Card>\n            <CardHeader>FILTER EFFECTS</CardHeader>\n            <CardBody>\n              <CardText>\n                <ImageFilters handleFilterChange={this.handleFilterChange} selectedImageFilter={this.state.selectedImageFilter}/>\n              </CardText>\n              <Button onClick={handleSave => this.handleSave()}>Save Changes</Button>\n            </CardBody>\n          </Card>\n          <Card>\n            <CardHeader>DELETE IMAGE</CardHeader>\n            <CardBody>\n              <CardText>\n                No longer want this image?\n              </CardText>\n              <Button onClick={handleRemove => this.handleRemove()}>Delete Image</Button>\n            </CardBody>\n          </Card>\n        </Col>\n      </CardGroup>\n    );\n  }\n};\n\nexport default connect(\n  state => ({\n    images: state.imagesReducer.images,\n    currentImage: state.imagesReducer.currentImage\n  }),\n  { saveImage, removeImage })(withRouter(ImageContainer));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchImages } from '../../actions/imageActions'\nimport ImageList from './ImageList'\nimport ImageContainer from './ImageContainer'\nimport { Row, Col} from 'reactstrap';\n\nclass ImagesContainer extends Component {\n\n  componentDidMount() {\n    this.props.fetchImages(this.props.user.id)\n  }\n\n  handleLoadingImages = () => {\n    if(this.props.loading) {\n      return (\n        <div>\n          <p>Loading Images...</p>\n        </div>\n      )\n    } else {\n      return <ImageList images={this.props.images} />\n    }\n  }\n\n   handleImage = () => {\n     if(!this.props.currentImage) {\n       return (\n        <p>Upload or click on an image to begin.</p>\n       )\n     } else {\n       return (\n        <ImageContainer image={this.props.currentImage}/>\n       )\n     }\n   }\n\n  render() {\n    return (\n      <Row className=\"container-fluid\">\n        <Col className=\"img-list\" sm={{ size: 2, offset: 1 }}>\n          {this.handleLoadingImages()}\n        </Col>\n        <Col className=\"selected-image\" sm={{ size: 9, offset: 0 }} >\n          {this.handleImage()}\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default connect(\n  state => ({\n    images: state.imagesReducer.images,\n    user: state.loginReducer.user,\n    currentImage: state.imagesReducer.currentImage\n  }),\n{ fetchImages })(ImagesContainer);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { login } from '../../actions/loginActions'\nimport { Alert, Container, Row, Col, Button, Form, FormGroup, Card, CardBody } from 'reactstrap';\n\nclass LoginForm extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: {\n        email: '',\n        password: ''\n      },\n      error: \"\"\n    };\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.props.login(this.state.user, this.props.history);\n    this.setState({error: this.props.error });\n  }\n\n  handleErrors = (errors) => {\n    return(\n      <ul className=\"errors\">\n        {Object.entries(errors).map((k, v) =>\n          <li key={k}>{k}</li>)}\n      </ul>\n    )\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            {this.state.error ? <Alert color=\"secondary\">{this.handleErrors(this.props.error)}</Alert> : null }\n            <Card className=\"login-form\">\n              <CardBody>\n                <Form name=\"loginForm\" onSubmit={(event) => this.handleSubmit(event)}>\n                  <FormGroup>\n                    <label>Email</label>\n                    <input\n                      className=\"form-control\"\n                      placeholder=\"Enter email to login or sign-up\"\n                      type=\"email\"\n                      name=\"email\"\n                      onChange={e => this.setState({\n                        user: { ...this.state.user, email: e.target.value} })}\n                      value={this.state.email}/>\n                    <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n                  </FormGroup>\n\n                  <FormGroup>\n                    <label>Password</label>\n                    <input\n                      className=\"form-control\"\n                      placeholder=\"Password\"\n                      type=\"password\"\n                      name=\"password\"\n                      onChange={e => this.setState({\n                        user: { ...this.state.user, password: e.target.value} })}\n                      value={this.state.password}/>\n                  </FormGroup>\n                 <Button type=\"submit\" className=\"btn btn-primary\">Submit</Button>\n               </Form>\n             </CardBody>\n           </Card>\n         </Col>\n       </Row>\n    </Container>\n    )\n  }\n}\n\nexport default connect(\n  state => ({\n    user: state.loginReducer.user,\n    error: state.loginReducer.error\n  }), { login })(LoginForm);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst NotFoundPage = () => (\n  <div>\n    <div>\n      <h1>404</h1>\n      <h2>Doh! This page doesn't exist.</h2>\n      <Link to=\"/\">Back to Home</Link>\n    </div>\n    <img src=\"https://corgimedia.s3.amazonaws.com/wp-content/uploads/2017/12/homer-computer-doh.jpg\" alt=\"404\" />\n  </div>\n);\n\nexport default NotFoundPage;\n","import React from 'react';\nimport './styles/App.css';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Header from './components/Header';\nimport ImagesContainer from './components/Images/ImagesContainer';\nimport LoginForm from './components/Users/LoginForm';\nimport NotFoundPage from './components/NotFoundPage';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Header />\n        <Switch>\n          <Route path=\"/\" component={LoginForm} exact={true}/>\n          <Route path=\"/images/:user_id\" component={ImagesContainer} />\n          <Route component={NotFoundPage} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n};\n\nexport default App;\n","const imagesReducer = (state = {\n  images: [],\n  loading: false,\n  currentImage: \"\"\n}, action) => {\n  switch(action.type) {\n    case 'LOADING_IMAGES':\n      return {\n        ...state,\n        images: [...state.images],\n        loading: true\n      }\n    case 'DISPLAY_IMAGES':\n      return {\n        ...state,\n        images: action.images,\n        loading: false\n      }\n    case 'CREATE_IMAGES':\n      return {\n        ...state,\n        images: [action.image, ...state.images],\n        currentImage: action.image,\n        loading: false\n      }\n    case 'UPDATE_IMAGE':\n      return {\n          ...state,\n          images: state.images.map(image => image.id === action.image.data.id ?\n            { ...image, transformations: action.image.data.attributes.transformations } :\n            image\n          )\n      };\n    case 'REMOVE_IMAGE':\n      const images = state.images.filter(image => image.id !== action.id);\n      return {\n        ...state,\n        images,\n        loading: false\n      }\n    case 'GET_CURRENT_IMAGE':\n      return {\n        ...state,\n        currentImage: action.image\n      }\n    default:\n      return state;\n  }\n}\n\nexport default imagesReducer;\n","const loginReducer = (state = {\n  user: {},\n  error: '',\n  logged_in: false\n}, action) => {\n  switch(action.type) {\n    case 'GET_USER':\n      return {\n        ...state,\n        user: action.user,\n      }\n    case 'LOGIN_ERROR':\n      return {\n        ...state,\n        error: action.error\n      }\n    case 'LOGGED_IN':\n      return {\n        ...state,\n        logged_in: true\n      }\n    case 'LOG_OUT':\n      return {\n        ...state,\n        logged_in: false\n      }\n    default:\n      return state;\n  }\n}\nexport default loginReducer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { combineReducers, createStore, applyMiddleware } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist'\nimport { PersistGate } from 'redux-persist/lib/integration/react';\nimport storage from 'redux-persist/lib/storage';\nimport thunk from 'redux-thunk';\nimport imagesReducer from './reducers/imagesReducer';\nimport loginReducer from './reducers/loginReducer';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst appReducer = combineReducers({\n  imagesReducer,\n  loginReducer\n})\n\nconst rootReducer = (state, action) => {\n if (action.type === 'LOG_OUT') {\n   state = undefined\n }\n return appReducer(state, action)\n}\n // Middleware: Redux Persist Config\n const persistConfig = {\n   key: 'root',\n   storage\n };\n\nexport const persistedReducer = persistReducer(persistConfig, rootReducer)\nexport const store = createStore(persistedReducer, applyMiddleware(thunk))\nexport const persistor = persistStore(store);\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}