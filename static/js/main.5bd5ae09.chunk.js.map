{"version":3,"sources":["pixel_logo.png","actions/imageActions.js","components/Images/ImageUploader.js","actions/loginActions.js","components/Users/LogoutButton.js","components/Navigation.js","components/Header.js","components/Images/ImageList.js","components/Images/ShowImage.js","components/Images/ImageFilters.js","components/Images/ImageContainer.js","components/Images/ImagesContainer.js","components/Users/LoginForm.js","components/NotFoundPage.js","App.js","reducers/imagesReducer.js","reducers/loginReducer.js","serviceWorker.js","index.js"],"names":["module","exports","baseURL","headers","ImageUploader","showWidget","window","cloudinary","openUploadWidget","cloudName","uploadPreset","error","result","event","handleSubmit","info","imageInfo","newImage","user_id","this","props","user","id","image_url","public_id","postImages","className","onClick","Component","connect","state","images","imagesReducer","loginReducer","image","dispatch","fetch","method","body","JSON","stringify","then","response","json","type","catch","console","log","withRouter","LogoutButton","e","preventDefault","logout","history","push","Nav","NavItem","NavLink","to","location","pathname","Navbar","light","expand","NavbarBrand","href","src","logo","alt","undefined","ImageList","handleClick","currentImage","map","key","publicId","effect","transformations","ShowImage","selectedImageFilter","filterOptions","ImageFilters","value","onChange","handleFilterChange","Object","keys","k","ImageContainer","handleSave","saveImage","handleRemove","removeImage","setSelectedImageFilter","setState","filter","target","prevProps","CardGroup","Card","Col","md","CardHeader","CardBody","CardText","Button","transformation","data","attributes","imageId","userId","reload","ImagesContainer","handleLoadingImages","loading","handleImage","fetchImages","Row","sm","size","offset","responseJSON","included","LoginForm","handleErrors","errors","entries","v","email","password","login","Container","Alert","color","Form","name","onSubmit","FormGroup","placeholder","mode","NotFoundPage","App","basename","path","component","exact","action","logged_in","Boolean","hostname","match","appReducer","combineReducers","persistConfig","storage","persistedReducer","persistReducer","store","createStore","applyMiddleware","thunk","persistor","persistStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5bd5ae09.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pixel_logo.99b02481.png\";","const baseURL = 'https://pixelate-app.herokuapp.com/'\nconst imagesURL = '/images'\nconst usersURL = '/users'\nconst headers =  {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      }\n\nexport const fetchImages = (user) => {\n  return (dispatch) => {\n    dispatch({ type: 'LOADING_IMAGES'})\n    fetch(`${baseURL + usersURL}/${user.id}`)\n      .then(response => { return response.json()})\n      .then(responseJSON => {\n      dispatch({\n        type: 'DISPLAY_IMAGES',\n        images: responseJSON.included.map(\n          image => (\n            { id:image.id, image_url:image.attributes.image_url, transformations:image.attributes.transformations}\n          ))\n        }\n      )\n    })\n  }\n}\n\nexport const postImages = (image) => {\n  return (dispatch) => {\n    fetch(baseURL + imagesURL, {\n      method: \"POST\",\n      headers: headers,\n      body: JSON.stringify({\n        image: image\n      })\n    })\n      .then(response => response.json())\n      .then(image => {\n        dispatch({\n          type: 'CREATE_IMAGES',\n          image\n        })\n      })\n      .catch(error => console.log(error))\n  };\n}\n\nexport const removeImage = (imageId, userId, history) => {\n  return (dispatch) => {\n    dispatch({ type: 'REMOVE_IMAGE'})\n    fetch(`${baseURL + imagesURL}/${imageId}`, {\n      method: \"DELETE\",\n      headers: headers,\n      body: JSON.stringify({\n        imageId\n      })\n    })\n    .then(window.location.reload(history.push(`/images/${userId}`)))\n  };\n}\n\nexport const saveImage = (image, transformation) => {\n  return (dispatch) => {\n    fetch(`${baseURL + imagesURL}/${image.id}`, {\n      method: \"PUT\",\n      headers: headers,\n      body: JSON.stringify({\n        image,\n        transformation\n      })\n    })\n    .then(response => response.json())\n    .then(image => {\n        dispatch({\n          type: 'UPDATE_IMAGE',\n          image\n        })\n        return image\n      }\n    )\n    .then(({ data: { id, attributes: { transformations, image_url } } }) => {\n      dispatch({\n        type: 'CURRENT_IMAGE',\n        image: {id, transformations, image_url}\n      })\n    })\n  };\n}\n\nexport const currentImage = (image) => {\n  return (dispatch) => {\n    dispatch({\n      type: 'CURRENT_IMAGE',\n      image\n    })\n  };\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom'\nimport { postImages } from '../../actions/imageActions'\n\n\nclass ImageUploader extends Component {\n\n  handleSubmit(imageInfo) {\n    let newImage = { user_id: this.props.user.id, image_url:imageInfo.public_id }\n    this.props.postImages(newImage)\n  }\n\n\tshowWidget = () => {\n    window.cloudinary.openUploadWidget({\n      cloudName: \"df8jfhyew\",\n      uploadPreset: \"eytnlidt\"},\n      (error, result) => {\n        if (!error && result && result.event === \"success\") {\n          this.handleSubmit(result.info)\n        }\n      }\n    )\n  }\n\n  render() {\n    return (\n      <button\n        className=\"nav-button\"\n        id=\"upload-widget\"\n        onClick={() => this.showWidget()}>\n        UPLOAD IMAGES\n      </button>\n    )\n  }\n}\n\nexport default connect(\n  state => ({\n    images: state.imagesReducer.images,\n    user: state.loginReducer.user\n}), { postImages })(withRouter(ImageUploader));\n","const baseURL = 'https://pixelate-app.herokuapp.com/'\nconst usersURL = '/users'\nconst headers = {\n  'Accept': 'application/json',\n  'Content-Type': 'application/json',\n}\n\nexport const login = (user, history) => {\n  return (dispatch) => {\n    fetch(baseURL + usersURL , {\n      mode: 'cors',\n      method: \"POST\",\n      headers: headers,\n      body: JSON.stringify({\n        user\n      })\n    })\n      .then(response => response.json())\n      .then(user => {\n        dispatch({\n          type: 'GET_USER',\n          user\n        })\n        return user\n      })\n      .then(user => {\n        if(user.result === undefined) {\n          dispatch({\n            type: 'LOGGED_IN',\n          })\n          history.push(`/images/${user.id}`)\n        } else {\n          dispatch({\n            type: 'LOGIN_ERROR',\n            error: user.user\n          })\n        }\n      })\n  };\n};\n\nexport const logout = (history) => {\n  return (dispatch) => {\n    dispatch({\n      type: 'LOG_OUT',\n    })\n  }\n}\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { logout } from '../../actions/loginActions';\n\nclass LogoutButton extends Component {\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.props.logout();\n    this.props.history.push(\"/\");\n  }\n\n  render() {\n    return (\n      <button\n        className=\"nav-button\"\n        onClick={(e) => this.handleSubmit(e)}>\n        LOG OUT\n      </button>\n    )\n  }\n}\n\nexport default connect(\n  state => ({\n    user: state.loginReducer.user,\n    error: state.loginReducer.error\n  }), { logout })(withRouter(LogoutButton));\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport ImageUploader from './Images/ImageUploader'\nimport LogoutButton from './Users/LogoutButton'\nimport { Nav, NavItem, NavLink} from 'reactstrap';\n\nconst Navigation = (props) => {\n  return (\n    <Nav>\n      <NavItem>\n        <NavLink to={props.history.location.pathname}>{<ImageUploader />}</NavLink>\n      </NavItem>\n      <NavItem>\n        <NavLink to=\"/\">{<LogoutButton />}</NavLink>\n      </NavItem>\n    </Nav>\n  );\n}\n\nexport default withRouter(Navigation);\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport logo from '../pixel_logo.png';\nimport { Navbar, NavbarBrand } from 'reactstrap';\nimport Navigation from './Navigation'\n\nconst Header = (props) => {\n  return (\n    <Navbar className=\"App-header\" light expand=\"md\">\n      <NavbarBrand href=\"/\"><img src={logo} className=\"App-logo\" alt=\"logo\" /></NavbarBrand>\n        {props.history.location.pathname  === \"/\" ? undefined : <Navigation />}\n    </Navbar>\n  );\n}\n\nexport default withRouter(Header);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {Image, Transformation, CloudinaryContext} from 'cloudinary-react';\nimport { currentImage } from '../../actions/imageActions'\n\nclass ImageList extends Component {\n\n  handleClick = (image) => {\n    this.props.currentImage(image)\n  }\n\n   render() {\n     return (\n       this.props.images.map(image =>\n         <div key={image.id} >\n           <CloudinaryContext cloudName=\"df8jfhyew\" >\n             <Image className='img-thumbnail' publicId={image.image_url} onClick={() => this.handleClick(image)}>\n               <Transformation effect={image.transformations} />\n             </Image>\n           </CloudinaryContext>\n         </div>\n       )\n     )\n   }\n\n}\n\nexport default connect( null ,{ currentImage })(ImageList);\n","import React from 'react';\nimport { Image, Transformation, CloudinaryContext}  from 'cloudinary-react';\n\nconst ShowImage = (props) => {\n  return (\n    <div key={props.image.id}>\n      <CloudinaryContext cloudName=\"df8jfhyew\">\n        <Image className='largeImage' publicId={props.image.image_url} >\n          <Transformation effect={props.selectedImageFilter} />\n        </Image>\n      </CloudinaryContext>\n    </div>\n  )\n};\n\nexport default ShowImage;\n","import React from 'react';\n\nconst filterOptions = {\n  \"No Effect\": \"none\",\n  \"Auto Brightness\": \"auto_brightness\",\n  \"Auto Saturation\": \"auto_saturation\",\n  \"Black & White\": \"blackwhite\",\n  \"Blur\": \"blur:100\",\n  \"Cartoonify\": \"cartoonify\",\n  \"Contrast: Light\": \"contrast:50\",\n  \"Contrast: Heavy\": \"contrast:100\",\n  \"Grayscale\": \"grayscale\",\n  \"Oil Paint\": \"oil_paint:75\",\n  \"Ombre\": \"gradient_fade:20\",\n  \"Pixelate: Light\": \"pixelate:10\",\n  \"Pixelate: Heavy\": \"pixelate:30\",\n  \"Sepia\": \"sepia:80\",\n  \"Sharpen\": \"sharpen:300\",\n  \"Tilt Shift\": \"tilt_shift:20\",\n  \"Vignette\": \"vignette:10\"\n}\n\nconst ImageFilters = (props) => {\n  return (\n    <select value={props.selectedImageFilter || \"none\"} onChange={props.handleFilterChange}>\n      {\n        Object.keys(filterOptions).map(\n        (k) =>\n        <option key={k} value={filterOptions[k]}>{k}</option>\n        )\n      }\n    </select>\n  );\n};\n\n\nexport default ImageFilters\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { saveImage, removeImage } from '../../actions/imageActions';\nimport ShowImage from './ShowImage';\nimport ImageFilters from './ImageFilters';\nimport { CardGroup, Col, Card,Button, CardHeader, CardBody, CardText} from 'reactstrap';\n\nclass ImageContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedImageFilter: null\n    };\n  };\n\n  componentDidMount() {\n    this.setSelectedImageFilter(this.props.currentImage.transformations);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.currentImage.id !== this.props.currentImage.id) {\n      this.setSelectedImageFilter(this.props.currentImage.transformations);\n    }\n  }\n\n  handleSave = () => {\n    this.props.saveImage(this.props.currentImage, this.state.selectedImageFilter)\n  }\n\n  handleRemove = () => {\n    this.props.removeImage(this.props.currentImage.id, this.props.currentImage.user_id, this.props.history)\n  }\n\n  setSelectedImageFilter = (selectedImageFilter) => {\n    this.setState({ selectedImageFilter });\n  }\n\n  handleFilterChange = (e) => {\n    const filter = e.target.value === \"none\" ? null : e.target.value;\n    this.setSelectedImageFilter(filter);\n  }\n\n  render() {\n    const { currentImage } = this.props;\n    return (\n      <CardGroup>\n        <Card className=\"card-img\">\n          <ShowImage image={currentImage} selectedImageFilter={this.state.selectedImageFilter} />\n        </Card>\n        <Col md=\"4\">\n            <Card>\n              <CardHeader>FILTER EFFECTS</CardHeader>\n              <CardBody>\n                <CardText>\n                  <ImageFilters handleFilterChange={this.handleFilterChange} selectedImageFilter={this.state.selectedImageFilter}/>\n                </CardText>\n                <Button onClick={handleSave => this.handleSave()}>Save Changes</Button>\n              </CardBody>\n            </Card>\n            <Card>\n              <CardHeader>DELETE IMAGE</CardHeader>\n              <CardBody>\n                <CardText>\n                  No longer want this image?\n                </CardText>\n                <Button onClick={handleRemove => this.handleRemove()}>Delete Image</Button>\n              </CardBody>\n            </Card>\n          </Col>\n        </CardGroup>\n    );\n  }\n};\n\nexport default connect(\n  state => ({\n    images: state.imagesReducer.images,\n    currentImage: state.imagesReducer.currentImage\n  }),\n  { saveImage, removeImage })(withRouter(ImageContainer));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchImages } from '../../actions/imageActions'\nimport ImageList from './ImageList'\nimport ImageContainer from './ImageContainer'\nimport { Row, Col} from 'reactstrap';\n\nclass ImagesContainer extends Component {\n  componentDidMount() {\n    this.props.fetchImages(this.props.user)\n  }\n\n  handleLoadingImages = () => {\n    if(this.props.loading) {\n      return (\n        <div>\n          <p>Loading Images...</p>\n        </div>\n      )\n    } else {\n      return <ImageList images={this.props.images} />\n    }\n  }\n\n   handleImage = () => {\n     if(!this.props.currentImage) {\n       return (\n        <p>Upload or click on an image to begin.</p>\n       )\n     } else {\n       return (\n        <ImageContainer image={this.props.currentImage}/>\n       )\n     }\n   }\n\n  render() {\n    return (\n      <Row className=\"container-fluid\">\n        <Col className=\"img-list\" sm={{ size: 2, offset: 1 }}>\n          {this.handleLoadingImages()}\n        </Col>\n        <Col className=\"selected-image\" sm={{ size: 9, offset: 0 }} >\n          {this.handleImage()}\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default connect(\n  state => ({\n    images: state.imagesReducer.images,\n    user: state.loginReducer.user,\n    currentImage: state.imagesReducer.currentImage\n  }),\n{ fetchImages })(ImagesContainer);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { login } from '../../actions/loginActions'\nimport { Alert, Container, Row, Col, Button, Form, FormGroup, Card, CardBody } from 'reactstrap';\n\nclass LoginForm extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: {\n        email: '',\n        password: ''\n      },\n      error: \"\"\n    };\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.props.login(this.state.user, this.props.history);\n    this.setState({error: this.props.error });\n  }\n\n  handleErrors = (errors) => {\n    return(\n      <ul className=\"errors\">\n        {Object.entries(errors).map((k, v) =>\n          <li key={k}>{k}</li>)}\n      </ul>\n    )\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            {this.state.error ? <Alert color=\"secondary\">{this.handleErrors(this.props.error)}</Alert> : null }\n            <Card className=\"login-form\">\n              <CardBody>\n                <Form name=\"loginForm\" onSubmit={(event) => this.handleSubmit(event)}>\n                  <FormGroup>\n                    <label>Email</label>\n                    <input\n                      className=\"form-control\"\n                      placeholder=\"Enter email to login or sign-up\"\n                      type=\"email\"\n                      name=\"email\"\n                      onChange={e => this.setState({\n                        user: { ...this.state.user, email: e.target.value} })}\n                      value={this.state.email}/>\n                    <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n                  </FormGroup>\n\n                  <FormGroup>\n                    <label>Password</label>\n                    <input\n                      className=\"form-control\"\n                      placeholder=\"Password\"\n                      type=\"password\"\n                      name=\"password\"\n                      onChange={e => this.setState({\n                        user: { ...this.state.user, password: e.target.value} })}\n                      value={this.state.password}/>\n                  </FormGroup>\n                 <Button type=\"submit\" className=\"btn btn-primary\">Submit</Button>\n               </Form>\n             </CardBody>\n           </Card>\n         </Col>\n       </Row>\n    </Container>\n    )\n  }\n}\n\nexport default connect(\n  state => ({\n    user: state.loginReducer.user,\n    error: state.loginReducer.error\n  }), { login })(LoginForm);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst NotFoundPage = () => (\n  <div>\n    <div>\n      <h1>404</h1>\n      <h2>Doh! This page doesn't exist.</h2>\n      <Link to=\"/\">Back to Home</Link>\n    </div>\n    <img src=\"https://corgimedia.s3.amazonaws.com/wp-content/uploads/2017/12/homer-computer-doh.jpg\" alt=\"404\" />\n  </div>\n);\n\nexport default NotFoundPage;\n","import React from 'react';\nimport './styles/App.css';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Header from './components/Header';\nimport ImagesContainer from './components/Images/ImagesContainer';\nimport LoginForm from './components/Users/LoginForm';\nimport NotFoundPage from './components/NotFoundPage';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <BrowserRouter basename='/'>\n        <Header />\n        <Switch>\n          <Route path=\"/\" component={LoginForm} exact={true}/>\n          <Route path=\"/images/:user_id\" component={ImagesContainer} />\n          <Route component={NotFoundPage} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n};\n\nexport default App;\n","const imagesReducer = (state = {\n  images: [],\n  loading: false,\n  currentImage: \"\"\n}, action) => {\n  switch(action.type) {\n    case 'LOADING_IMAGES':\n      return {\n        ...state,\n        images: [...state.images],\n        loading: true\n      }\n    case 'DISPLAY_IMAGES':\n      return {\n        ...state,\n        images: action.images,\n        loading: false\n      }\n    case 'CREATE_IMAGES':\n      return {\n        ...state,\n        images: [action.image, ...state.images],\n        currentImage: action.image,\n        loading: false\n      }\n    case 'UPDATE_IMAGE':\n      return {\n          ...state,\n          images: state.images.map(image => image.id === action.image.data.id ?\n            { ...image, transformations: action.image.data.attributes.transformations } :\n            image\n          )\n      };\n    case 'REMOVE_IMAGE':\n      const images = state.images.filter(image => image.id !== action.id);\n      return {\n        ...state,\n        images,\n        loading: false\n      }\n    case 'CURRENT_IMAGE':\n      return {\n        ...state,\n        currentImage: action.image\n      }\n    default:\n      return state;\n  }\n}\n\nexport default imagesReducer;\n","const loginReducer = (state = {\n  user: {},\n  error: '',\n  logged_in: false\n}, action) => {\n  switch(action.type) {\n    case 'GET_USER':\n      return {\n        ...state,\n        user: action.user,\n      }\n    case 'LOGIN_ERROR':\n      return {\n        ...state,\n        error: action.error\n      }\n    case 'LOGGED_IN':\n      return {\n        ...state,\n        logged_in: true\n      }\n    case 'LOG_OUT':\n      return {\n        ...state,\n        logged_in: false\n      }\n    default:\n      return state;\n  }\n}\nexport default loginReducer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { combineReducers, createStore, applyMiddleware } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist'\nimport { PersistGate } from 'redux-persist/lib/integration/react';\nimport storage from 'redux-persist/lib/storage';\nimport thunk from 'redux-thunk';\nimport imagesReducer from './reducers/imagesReducer';\nimport loginReducer from './reducers/loginReducer';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst appReducer = combineReducers({\n  imagesReducer,\n  loginReducer\n})\n\nconst rootReducer = (state, action) => {\n if (action.type === 'LOG_OUT') {\n   state = undefined\n }\n return appReducer(state, action)\n}\n // Middleware: Redux Persist Config\n const persistConfig = {\n   key: 'root',\n   storage\n };\n\nexport const persistedReducer = persistReducer(persistConfig, rootReducer)\nexport const store = createStore(persistedReducer, applyMiddleware(thunk))\nexport const persistor = persistStore(store);\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}