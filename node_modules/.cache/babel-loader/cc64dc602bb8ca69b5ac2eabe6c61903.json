{"ast":null,"code":"const baseURL = 'https://pixelate-app.herokuapp.com/';\nconst imagesURL = '/images';\nconst usersURL = '/users';\nconst headers = {\n  'Accept': 'application/json',\n  'Content-Type': 'application/json'\n};\nexport const fetchImages = user => {\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_IMAGES'\n    });\n    fetch(\"\".concat(baseURL + usersURL, \"/\").concat(user.id)).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      dispatch({\n        type: 'DISPLAY_IMAGES',\n        images: responseJSON.included.map(image => ({\n          id: image.id,\n          image_url: image.attributes.image_url,\n          transformations: image.attributes.transformations\n        }))\n      });\n    });\n  };\n};\nexport const postImages = image => {\n  return dispatch => {\n    fetch(baseURL + imagesURL, {\n      method: \"POST\",\n      headers: headers,\n      body: JSON.stringify({\n        image: image\n      })\n    }).then(response => response.json()).then(image => {\n      dispatch({\n        type: 'CREATE_IMAGES',\n        image\n      });\n    }).catch(error => console.log(error));\n  };\n};\nexport const removeImage = (imageId, userId, history) => {\n  return dispatch => {\n    dispatch({\n      type: 'REMOVE_IMAGE'\n    });\n    fetch(\"\".concat(baseURL + imagesURL, \"/\").concat(imageId), {\n      method: \"DELETE\",\n      headers: headers,\n      body: JSON.stringify({\n        imageId\n      })\n    }).then(window.location.reload(history.push(\"/images/\".concat(userId))));\n  };\n};\nexport const saveImage = (image, transformation) => {\n  return dispatch => {\n    fetch(\"\".concat(baseURL + imagesURL, \"/\").concat(image.id), {\n      method: \"PUT\",\n      headers: headers,\n      body: JSON.stringify({\n        image,\n        transformation\n      })\n    }).then(response => response.json()).then(image => {\n      console.log(image);\n      dispatch({\n        type: 'UPDATE_IMAGE',\n        image\n      });\n      return image;\n    }).then(image => {\n      console.log(image);\n      dispatch({\n        type: 'CURRENT_IMAGE',\n        image: {\n          id: image.id,\n          transformations: image.attributes.transformations,\n          image_url: image.attributes.image_url\n        }\n      });\n    });\n  };\n};\nexport const currentImage = image => {\n  return dispatch => {\n    dispatch({\n      type: 'CURRENT_IMAGE',\n      image\n    });\n  };\n};","map":{"version":3,"sources":["/Users/jennifer/Flatiron School/Projects/pixelate-app/pixel-app-client/src/actions/imageActions.js"],"names":["baseURL","imagesURL","usersURL","headers","fetchImages","user","dispatch","type","fetch","id","then","response","json","responseJSON","images","included","map","image","image_url","attributes","transformations","postImages","method","body","JSON","stringify","catch","error","console","log","removeImage","imageId","userId","history","window","location","reload","push","saveImage","transformation","currentImage"],"mappings":"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","sourcesContent":["const baseURL = 'https://pixelate-app.herokuapp.com/'\nconst imagesURL = '/images'\nconst usersURL = '/users'\nconst headers =  {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      }\n\nexport const fetchImages = (user) => {\n  return (dispatch) => {\n    dispatch({ type: 'LOADING_IMAGES'})\n    fetch(`${baseURL + usersURL}/${user.id}`)\n      .then(response => { return response.json()})\n      .then(responseJSON => {\n      dispatch({\n        type: 'DISPLAY_IMAGES',\n        images: responseJSON.included.map(\n          image => (\n            { id:image.id, image_url:image.attributes.image_url, transformations:image.attributes.transformations}\n          ))\n        }\n      )\n    })\n  }\n}\n\nexport const postImages = (image) => {\n  return (dispatch) => {\n    fetch(baseURL + imagesURL, {\n      method: \"POST\",\n      headers: headers,\n      body: JSON.stringify({\n        image: image\n      })\n    })\n      .then(response => response.json())\n      .then(image => {\n        dispatch({\n          type: 'CREATE_IMAGES',\n          image\n        })\n      })\n      .catch(error => console.log(error))\n  };\n}\n\nexport const removeImage = (imageId, userId, history) => {\n  return (dispatch) => {\n    dispatch({ type: 'REMOVE_IMAGE'})\n    fetch(`${baseURL + imagesURL}/${imageId}`, {\n      method: \"DELETE\",\n      headers: headers,\n      body: JSON.stringify({\n        imageId\n      })\n    })\n    .then(window.location.reload(history.push(`/images/${userId}`)))\n  };\n}\n\nexport const saveImage = (image, transformation) => {\n  return (dispatch) => {\n    fetch(`${baseURL + imagesURL}/${image.id}`, {\n      method: \"PUT\",\n      headers: headers,\n      body: JSON.stringify({\n        image,\n        transformation\n      })\n    })\n    .then(response => response.json())\n    .then(image => {\n      console.log(image);\n        dispatch({\n          type: 'UPDATE_IMAGE',\n          image\n        })\n        return image\n      }\n    )\n    .then(image => {\n      console.log(image);\n      dispatch({\n        type: 'CURRENT_IMAGE',\n        image: {id: image.id, transformations: image.attributes.transformations, image_url: image.attributes.image_url}\n      })\n    })\n  };\n}\n\nexport const currentImage = (image) => {\n  return (dispatch) => {\n    dispatch({\n      type: 'CURRENT_IMAGE',\n      image\n    })\n  };\n}\n"]},"metadata":{},"sourceType":"module"}