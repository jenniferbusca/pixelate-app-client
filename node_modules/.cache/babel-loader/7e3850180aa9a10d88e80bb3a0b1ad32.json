{"ast":null,"code":"const baseURL = 'http://localhost:3000';\nconst imagesURL = '/images';\nconst usersURL = '/users';\nexport const fetchImages = user => {\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_IMAGES'\n    });\n    fetch(\"\".concat(baseURL + usersURL, \"/\").concat(user.id)).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      console.log(responseJSON); // dispatch({\n      //   type: 'DISPLAY_IMAGES',\n      //   images: responseJSON.included.map(\n      //     image => (\n      //       { id:image.id, image_url:image.attributes.image_url}\n      //     ))\n      //   }\n      // )\n    });\n  };\n};\nexport const postImages = image => {\n  return dispatch => {\n    fetch(baseURL + imagesURL, {\n      method: \"POST\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        image: image\n      })\n    }).then(response => response.json()).then(image => {\n      dispatch({\n        type: 'CREATE_IMAGES',\n        image\n      });\n    }).catch(error => console.log(error));\n  };\n};\nexport const removeImage = (imageId, userId, history) => {\n  return dispatch => {\n    dispatch({\n      type: 'REMOVE_IMAGE'\n    });\n    fetch(\"\".concat(baseURL + imagesURL, \"/\").concat(imageId), {\n      method: \"DELETE\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        imageId\n      })\n    }).then(window.location.reload(history.push(\"/images/\".concat(userId))));\n  };\n};\nexport const saveImage = (image, transformation) => {\n  return dispatch => {\n    fetch(\"\".concat(baseURL + imagesURL, \"/\").concat(image.id), {\n      method: \"PUT\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        image,\n        transformation\n      })\n    }).then(response => response.json()).then(image => dispatch({\n      type: 'UPDATE_IMAGE',\n      image\n    })).catch(error => console.log(error));\n  };\n};","map":{"version":3,"sources":["/Users/jennifer/Flatiron School/Projects/pixelate-app/pixel-app-client/src/actions/imageActions.js"],"names":["baseURL","imagesURL","usersURL","fetchImages","user","dispatch","type","fetch","id","then","response","json","responseJSON","console","log","postImages","image","method","headers","body","JSON","stringify","catch","error","removeImage","imageId","userId","history","window","location","reload","push","saveImage","transformation"],"mappings":"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","sourcesContent":["const baseURL = 'http://localhost:3000'\nconst imagesURL = '/images'\nconst usersURL = '/users'\n\nexport const fetchImages = (user) => {\n  return (dispatch) => {\n    dispatch({ type: 'LOADING_IMAGES'})\n    fetch(`${baseURL + usersURL}/${user.id}`)\n      .then(response => { return response.json()})\n      .then(responseJSON => {\n        console.log(responseJSON)\n      // dispatch({\n      //   type: 'DISPLAY_IMAGES',\n      //   images: responseJSON.included.map(\n      //     image => (\n      //       { id:image.id, image_url:image.attributes.image_url}\n      //     ))\n      //   }\n      // )\n    })\n  }\n}\n\nexport const postImages = (image) => {\n  return (dispatch) => {\n    fetch(baseURL + imagesURL, {\n      method: \"POST\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        image: image\n      })\n    })\n      .then(response => response.json())\n      .then(image => {\n        dispatch({\n          type: 'CREATE_IMAGES',\n          image\n        })\n      })\n      .catch(error => console.log(error))\n  };\n}\n\nexport const removeImage = (imageId, userId, history) => {\n  return (dispatch) => {\n    dispatch({ type: 'REMOVE_IMAGE'})\n    fetch(`${baseURL + imagesURL}/${imageId}`, {\n      method: \"DELETE\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        imageId\n      })\n    })\n    .then(window.location.reload(history.push(`/images/${userId}`)))\n  };\n}\n\n\nexport const saveImage = (image, transformation) => {\n  return (dispatch) => {\n    fetch(`${baseURL + imagesURL}/${image.id}`, {\n      method: \"PUT\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        image,\n        transformation\n      })\n    })\n      .then(response => response.json())\n      .then(image =>\n        dispatch({\n          type: 'UPDATE_IMAGE',\n          image\n        })\n      )\n      .catch(error => console.log(error))\n  };\n}\n"]},"metadata":{},"sourceType":"module"}