{"ast":null,"code":"const baseURL = 'http://localhost:3000';\nconst imagesURL = '/images';\nconst usersURL = '/users'; //image action creators\n\nexport const fetchImages = user => {\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_IMAGES'\n    });\n    fetch(\"\".concat(baseURL + usersURL, \"/\").concat(user.id)).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      dispatch({\n        type: 'DISPLAY_IMAGES',\n        images: responseJSON.included.map(image => ({\n          id: image.id,\n          image_url: image.attributes.image_url\n        }))\n      });\n    });\n  };\n};\nexport const postImages = image => {\n  return dispatch => {\n    fetch(baseURL + imagesURL, {\n      method: \"POST\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        image: image\n      })\n    }).then(response => response.json()).then(image => {\n      dispatch({\n        type: 'CREATE_IMAGES',\n        image\n      });\n    }).catch(error => console.log(error));\n  };\n}; // export const removeImage = (imageId) => {\n//   return (dispatch) => {\n//     dispatch({ type: 'REMOVE_IMAGE'})\n//     fetch(`${baseURL + imagesURL}/${imageId}`)\n//       .then(response => { return response.json()})\n//       .then(responseJSON => {\n//         console.log(responseJSON)\n//     })\n//   }\n// }\n\nexport const removeImage = imageId => {\n  return dispatch => {\n    dispatch({\n      type: 'REMOVE_IMAGE'\n    });\n    fetch(\"\".concat(baseURL + imagesURL, \"/\").concat(imageId), {\n      method: \"DELETE\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        imageId\n      })\n    }).then(response => console.log(response.json())); // .then(this.fetchImages())\n    // .then(images => {\n    // console.log(images)\n    // dispatch({\n    //   type: 'CREATE_IMAGES',\n    //   image\n    // })\n    // })\n    // .catch(error => console.log(error))\n  };\n};","map":{"version":3,"sources":["/Users/jennifer/Flatiron School/Projects/pixelate-app/pixel-app-client/src/actions/imageActions.js"],"names":["baseURL","imagesURL","usersURL","fetchImages","user","dispatch","type","fetch","id","then","response","json","responseJSON","images","included","map","image","image_url","attributes","postImages","method","headers","body","JSON","stringify","catch","error","console","log","removeImage","imageId"],"mappings":"AAAA,MAAMA,OAAO,GAAG,uBAAhB;AACA,MAAMC,SAAS,GAAG,SAAlB;AACA,MAAMC,QAAQ,GAAG,QAAjB,C,CAEA;;AACA,OAAO,MAAMC,WAAW,GAAIC,IAAD,IAAU;AACnC,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACAC,IAAAA,KAAK,WAAIP,OAAO,GAAGE,QAAd,cAA0BE,IAAI,CAACI,EAA/B,EAAL,CACGC,IADH,CACQC,QAAQ,IAAI;AAAE,aAAOA,QAAQ,CAACC,IAAT,EAAP;AAAuB,KAD7C,EAEGF,IAFH,CAEQG,YAAY,IAAI;AACtBP,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAE,gBADC;AAEPO,QAAAA,MAAM,EAAED,YAAY,CAACE,QAAb,CAAsBC,GAAtB,CACNC,KAAK,KACH;AAAER,UAAAA,EAAE,EAACQ,KAAK,CAACR,EAAX;AAAeS,UAAAA,SAAS,EAACD,KAAK,CAACE,UAAN,CAAiBD;AAA1C,SADG,CADC;AAFD,OAAD,CAAR;AAQD,KAXD;AAYD,GAdD;AAeD,CAhBM;AAkBP,OAAO,MAAME,UAAU,GAAIH,KAAD,IAAW;AACnC,SAAQX,QAAD,IAAc;AACnBE,IAAAA,KAAK,CAACP,OAAO,GAAGC,SAAX,EAAsB;AACzBmB,MAAAA,MAAM,EAAE,MADiB;AAEzBC,MAAAA,OAAO,EAAE;AACP,kBAAU,kBADH;AAEP,wBAAgB;AAFT,OAFgB;AAMzBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBR,QAAAA,KAAK,EAAEA;AADY,OAAf;AANmB,KAAtB,CAAL,CAUGP,IAVH,CAUQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAVpB,EAWGF,IAXH,CAWQO,KAAK,IAAI;AACbX,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAE,eADC;AAEPU,QAAAA;AAFO,OAAD,CAAR;AAID,KAhBH,EAiBGS,KAjBH,CAiBSC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAjBlB;AAkBD,GAnBD;AAoBD,CArBM,C,CAuBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMG,WAAW,GAAIC,OAAD,IAAa;AACtC,SAAQzB,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACAC,IAAAA,KAAK,WAAIP,OAAO,GAAGC,SAAd,cAA2B6B,OAA3B,GAAsC;AACzCV,MAAAA,MAAM,EAAE,QADiC;AAEzCC,MAAAA,OAAO,EAAE;AACP,kBAAU,kBADH;AAEP,wBAAgB;AAFT,OAFgC;AAMzCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBM,QAAAA;AADmB,OAAf;AANmC,KAAtC,CAAL,CAUGrB,IAVH,CAUQC,QAAQ,IAAIiB,OAAO,CAACC,GAAR,CAAYlB,QAAQ,CAACC,IAAT,EAAZ,CAVpB,EAFmB,CAajB;AACA;AACE;AACA;AACA;AACA;AACA;AACF;AACA;AACH,GAtBD;AAuBD,CAxBM","sourcesContent":["const baseURL = 'http://localhost:3000'\nconst imagesURL = '/images'\nconst usersURL = '/users'\n\n//image action creators\nexport const fetchImages = (user) => {\n  return (dispatch) => {\n    dispatch({ type: 'LOADING_IMAGES'})\n    fetch(`${baseURL + usersURL}/${user.id}`)\n      .then(response => { return response.json()})\n      .then(responseJSON => {\n      dispatch({\n        type: 'DISPLAY_IMAGES',\n        images: responseJSON.included.map(\n          image => (\n            { id:image.id, image_url:image.attributes.image_url}\n          ))\n        }\n      )\n    })\n  }\n}\n\nexport const postImages = (image) => {\n  return (dispatch) => {\n    fetch(baseURL + imagesURL, {\n      method: \"POST\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        image: image\n      })\n    })\n      .then(response => response.json())\n      .then(image => {\n        dispatch({\n          type: 'CREATE_IMAGES',\n          image\n        })\n      })\n      .catch(error => console.log(error))\n  };\n}\n\n// export const removeImage = (imageId) => {\n//   return (dispatch) => {\n//     dispatch({ type: 'REMOVE_IMAGE'})\n//     fetch(`${baseURL + imagesURL}/${imageId}`)\n//       .then(response => { return response.json()})\n//       .then(responseJSON => {\n//         console.log(responseJSON)\n//     })\n//   }\n// }\nexport const removeImage = (imageId) => {\n  return (dispatch) => {\n    dispatch({ type: 'REMOVE_IMAGE'})\n    fetch(`${baseURL + imagesURL}/${imageId}`, {\n      method: \"DELETE\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        imageId\n      })\n    })\n      .then(response => console.log(response.json()))\n      // .then(this.fetchImages())\n      // .then(images => {\n        // console.log(images)\n        // dispatch({\n        //   type: 'CREATE_IMAGES',\n        //   image\n        // })\n      // })\n      // .catch(error => console.log(error))\n  };\n}\n"]},"metadata":{},"sourceType":"module"}